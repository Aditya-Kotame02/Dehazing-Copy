{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aditya Kotame\\\\Dehazing-Copy\\\\frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from 'chart.js';\n\n// // Register Chart.js components\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// const Dashboard = () => {\n//   const [systemStats, setSystemStats] = useState({\n//     processedImages: 0,\n//     successfulImages: 0,\n//     avgProcessingTime: 0,\n//     successRate: 0,\n//     psnr: 0,\n//   });\n//   const [processingHistory, setProcessingHistory] = useState([]);\n//   const [performanceMetrics, setPerformanceMetrics] = useState({\n//     psnr: 0,\n//   });\n//   const [recentActivity, setRecentActivity] = useState([]);\n\n//   // WebSocket connection\n//   useEffect(() => {\n//     const ws = new WebSocket(\"ws://localhost:5000\");\n\n//     ws.onopen = () => {\n//       console.log(\"WebSocket connected\");\n//     };\n\n//     ws.onmessage = (event) => {\n//       const message = JSON.parse(event.data);\n//       console.log(\"Received WebSocket message:\", message);\n\n//       if (message.type === \"stats\") {\n//         console.log(\"Updating system stats with:\", message.data);\n//         setSystemStats(message.data); // Update system stats in real-time\n//       }\n//     };\n\n//     ws.onclose = () => {\n//       console.log(\"WebSocket disconnected\");\n//     };\n\n//     ws.onerror = (error) => {\n//       console.error(\"WebSocket error:\", error);\n//     };\n\n//     // Cleanup WebSocket connection on component unmount\n//     return () => {\n//       ws.close();\n//     };\n//   }, []); // Empty dependency array ensures this runs only once\n\n//   // Log updated system stats\n//   useEffect(() => {\n//     console.log(\"Updated systemStats:\", systemStats);\n//   }, [systemStats]);\n\n//   // Fetch initial data from the backend\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         console.log(\"Fetching system stats...\");\n//         const statsResponse = await axios.get('http://localhost:5000/api/system-stats');\n//         console.log(\"System stats response:\", statsResponse.data);\n\n//         console.log(\"Fetching processing history...\");\n//         const historyResponse = await axios.get('http://localhost:5000/api/processing-history');\n//         console.log(\"Processing history response:\", historyResponse.data);\n\n//         console.log(\"Fetching performance metrics...\");\n//         const metricsResponse = await axios.get('http://localhost:5000/api/performance-metrics');\n//         console.log(\"Performance metrics response:\", metricsResponse.data);\n\n//         console.log(\"Fetching recent activity...\");\n//         const activityResponse = await axios.get('http://localhost:5000/api/recent-activity');\n//         console.log(\"Recent activity response:\", activityResponse.data);\n\n//         // Update state with fetched data\n//         setSystemStats(statsResponse.data);\n//         setProcessingHistory(historyResponse.data);\n//         setPerformanceMetrics(metricsResponse.data);\n//         setRecentActivity(activityResponse.data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Chart data for processing history\n//   const historyChartData = {\n//     labels: processingHistory.map((entry) => entry.date),\n//     datasets: [\n//       {\n//         label: 'Processed Images',\n//         data: processingHistory.map((entry) => entry.count),\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//       },\n//     ],\n//   };\n\n//   // Chart data for PSNR\n//   const psnrChartData = {\n//     labels: ['PSNR'],\n//     datasets: [\n//       {\n//         label: 'PSNR',\n//         data: [systemStats.psnr],\n//         backgroundColor: 'rgba(153, 102, 255, 0.2)',\n//         borderColor: 'rgba(153, 102, 255, 1)',\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n//   {systemStats ? (\n//     <>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Processed Images</h2>\n//         <p className=\"text-2xl\">{systemStats.processedImages ?? \"N/A\"}</p>\n//       </div>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Successful Images</h2>\n//         <p className=\"text-2xl\">{systemStats.successfulImages ?? \"N/A\"}</p>\n//       </div>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Avg. Processing Time</h2>\n//         <p className=\"text-2xl\">\n//           {systemStats.avgProcessingTime !== undefined \n//             ? `${systemStats.avgProcessingTime.toFixed(2)} ms` \n//             : \"N/A\"}\n//         </p>\n//       </div>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Success Rate</h2>\n//         <p className=\"text-2xl\">\n//           {systemStats.successRate !== undefined \n//             ? `${systemStats.successRate.toFixed(2)}%` \n//             : \"N/A\"}\n//         </p>\n//       </div>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Accuracy</h2>\n//         <p className=\"text-2xl\">\n//           {systemStats.accuracy !== undefined \n//             ? `${systemStats.accuracy.toFixed(2)}%` \n//             : \"N/A\"}\n//         </p>\n//       </div>\n//     </>\n//   ) : (\n//     <p className=\"text-center text-gray-500\">Loading system statistics...</p>\n//   )}\n// </div>\n\n//       {/* Processing History Chart */}\n//       <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n//         <h2 className=\"text-xl font-semibold mb-4\">Processing History (Last 7 Days)</h2>\n//         <Line data={historyChartData} />\n//       </div>\n\n//       {/* Performance Metrics */}\n//       <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n//         <h2 className=\"text-xl font-semibold mb-4\">Performance Metrics</h2>\n//         <Bar data={psnrChartData} />\n//       </div>\n\n//       {/* Recent Activity */}\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold mb-4\">Recent Activity</h2>\n//         <ul>\n//           {recentActivity.map((activity, index) => (\n//             <li key={index} className=\"mb-2\">\n//               {activity.description} - <span className=\"text-gray-500\">{activity.timestamp}</span>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  var _performanceMetrics$p;\n  const [systemStats, setSystemStats] = useState(null);\n  const [processingHistory, setProcessingHistory] = useState([]);\n  const [performanceMetrics, setPerformanceMetrics] = useState(null);\n  const [recentActivity, setRecentActivity] = useState([]);\n  useEffect(() => {\n    const ws = new WebSocket(\"ws://localhost:5000\");\n    ws.onopen = () => console.log(\"WebSocket connected\");\n    ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      if (message.type === \"stats\") {\n        setSystemStats(message.data);\n      }\n    };\n    ws.onclose = () => console.log(\"WebSocket disconnected\");\n    ws.onerror = error => console.error(\"WebSocket error:\", error);\n    return () => ws.close();\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [statsRes, historyRes, metricsRes, activityRes] = await Promise.all([axios.get('http://localhost:5000/api/system-stats'), axios.get('http://localhost:5000/api/processing-history'), axios.get('http://localhost:5000/api/performance-metrics'), axios.get('http://localhost:5000/api/recent-activity')]);\n        setSystemStats(statsRes.data);\n        setProcessingHistory(historyRes.data);\n        setPerformanceMetrics(metricsRes.data);\n        setRecentActivity(activityRes.data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const historyChartData = {\n    labels: processingHistory.map(entry => entry.date),\n    datasets: [{\n      label: 'Processed Images',\n      data: processingHistory.map(entry => entry.count),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)'\n    }]\n  };\n  const psnrChartData = {\n    labels: ['PSNR'],\n    datasets: [{\n      label: 'PSNR',\n      data: [(_performanceMetrics$p = performanceMetrics === null || performanceMetrics === void 0 ? void 0 : performanceMetrics.psnr) !== null && _performanceMetrics$p !== void 0 ? _performanceMetrics$p : 0],\n      backgroundColor: 'rgba(153, 102, 255, 0.2)',\n      borderColor: 'rgba(153, 102, 255, 1)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\",\n    children: [systemStats ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [['processedImages', 'successfulImages'].map(key => {\n        var _systemStats$key;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-6 rounded-lg shadow-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-xl font-semibold\",\n            children: key.replace(/([A-Z])/g, ' $1')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-2xl\",\n            children: (_systemStats$key = systemStats[key]) !== null && _systemStats$key !== void 0 ? _systemStats$key : \"N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }, this);\n      }), [\"avgProcessingTime\", \"successRate\"].map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-md\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-semibold\",\n          children: key.replace(/([A-Z])/g, ' $1')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-2xl\",\n          children: systemStats[key] !== undefined ? `${systemStats[key].toFixed(2)}${key.includes(\"Time\") ? \" ms\" : \"%\"}` : \"N/A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-center text-gray-500\",\n      children: \"Loading system statistics...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"Processing History (Last 7 Days)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: historyChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"Performance Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        data: psnrChartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-md\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-semibold mb-4\",\n        children: \"Recent Activity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: recentActivity.map((activity, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"mb-2\",\n          children: [activity.description, \" - \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-gray-500\",\n            children: activity.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 40\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"Of3p4R4Wk3M8xARxF5qNe0GXeO0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","Bar","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","Fragment","_Fragment","register","Dashboard","_s","_performanceMetrics$p","systemStats","setSystemStats","processingHistory","setProcessingHistory","performanceMetrics","setPerformanceMetrics","recentActivity","setRecentActivity","ws","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","type","onclose","onerror","error","close","fetchData","statsRes","historyRes","metricsRes","activityRes","Promise","all","get","historyChartData","labels","map","entry","date","datasets","label","count","borderColor","backgroundColor","psnrChartData","psnr","className","children","key","_systemStats$key","replace","fileName","_jsxFileName","lineNumber","columnNumber","undefined","toFixed","includes","activity","index","description","timestamp","_c","$RefreshReg$"],"sources":["C:/Users/Aditya Kotame/Dehazing-Copy/frontend/src/pages/Dashboard.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import {\r\n//   Chart as ChartJS,\r\n//   CategoryScale,\r\n//   LinearScale,\r\n//   PointElement,\r\n//   LineElement,\r\n//   BarElement,\r\n//   Title,\r\n//   Tooltip,\r\n//   Legend,\r\n// } from 'chart.js';\r\n\r\n// // Register Chart.js components\r\n// ChartJS.register(\r\n//   CategoryScale,\r\n//   LinearScale,\r\n//   PointElement,\r\n//   LineElement,\r\n//   BarElement,\r\n//   Title,\r\n//   Tooltip,\r\n//   Legend\r\n// );\r\n\r\n// const Dashboard = () => {\r\n//   const [systemStats, setSystemStats] = useState({\r\n//     processedImages: 0,\r\n//     successfulImages: 0,\r\n//     avgProcessingTime: 0,\r\n//     successRate: 0,\r\n//     psnr: 0,\r\n//   });\r\n//   const [processingHistory, setProcessingHistory] = useState([]);\r\n//   const [performanceMetrics, setPerformanceMetrics] = useState({\r\n//     psnr: 0,\r\n//   });\r\n//   const [recentActivity, setRecentActivity] = useState([]);\r\n\r\n//   // WebSocket connection\r\n//   useEffect(() => {\r\n//     const ws = new WebSocket(\"ws://localhost:5000\");\r\n\r\n//     ws.onopen = () => {\r\n//       console.log(\"WebSocket connected\");\r\n//     };\r\n\r\n//     ws.onmessage = (event) => {\r\n//       const message = JSON.parse(event.data);\r\n//       console.log(\"Received WebSocket message:\", message);\r\n\r\n//       if (message.type === \"stats\") {\r\n//         console.log(\"Updating system stats with:\", message.data);\r\n//         setSystemStats(message.data); // Update system stats in real-time\r\n//       }\r\n//     };\r\n\r\n//     ws.onclose = () => {\r\n//       console.log(\"WebSocket disconnected\");\r\n//     };\r\n\r\n//     ws.onerror = (error) => {\r\n//       console.error(\"WebSocket error:\", error);\r\n//     };\r\n\r\n//     // Cleanup WebSocket connection on component unmount\r\n//     return () => {\r\n//       ws.close();\r\n//     };\r\n//   }, []); // Empty dependency array ensures this runs only once\r\n\r\n//   // Log updated system stats\r\n//   useEffect(() => {\r\n//     console.log(\"Updated systemStats:\", systemStats);\r\n//   }, [systemStats]);\r\n\r\n//   // Fetch initial data from the backend\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         console.log(\"Fetching system stats...\");\r\n//         const statsResponse = await axios.get('http://localhost:5000/api/system-stats');\r\n//         console.log(\"System stats response:\", statsResponse.data);\r\n\r\n//         console.log(\"Fetching processing history...\");\r\n//         const historyResponse = await axios.get('http://localhost:5000/api/processing-history');\r\n//         console.log(\"Processing history response:\", historyResponse.data);\r\n\r\n//         console.log(\"Fetching performance metrics...\");\r\n//         const metricsResponse = await axios.get('http://localhost:5000/api/performance-metrics');\r\n//         console.log(\"Performance metrics response:\", metricsResponse.data);\r\n\r\n//         console.log(\"Fetching recent activity...\");\r\n//         const activityResponse = await axios.get('http://localhost:5000/api/recent-activity');\r\n//         console.log(\"Recent activity response:\", activityResponse.data);\r\n\r\n//         // Update state with fetched data\r\n//         setSystemStats(statsResponse.data);\r\n//         setProcessingHistory(historyResponse.data);\r\n//         setPerformanceMetrics(metricsResponse.data);\r\n//         setRecentActivity(activityResponse.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   // Chart data for processing history\r\n//   const historyChartData = {\r\n//     labels: processingHistory.map((entry) => entry.date),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Processed Images',\r\n//         data: processingHistory.map((entry) => entry.count),\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Chart data for PSNR\r\n//   const psnrChartData = {\r\n//     labels: ['PSNR'],\r\n//     datasets: [\r\n//       {\r\n//         label: 'PSNR',\r\n//         data: [systemStats.psnr],\r\n//         backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n//         borderColor: 'rgba(153, 102, 255, 1)',\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n//   {systemStats ? (\r\n//     <>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Processed Images</h2>\r\n//         <p className=\"text-2xl\">{systemStats.processedImages ?? \"N/A\"}</p>\r\n//       </div>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Successful Images</h2>\r\n//         <p className=\"text-2xl\">{systemStats.successfulImages ?? \"N/A\"}</p>\r\n//       </div>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Avg. Processing Time</h2>\r\n//         <p className=\"text-2xl\">\r\n//           {systemStats.avgProcessingTime !== undefined \r\n//             ? `${systemStats.avgProcessingTime.toFixed(2)} ms` \r\n//             : \"N/A\"}\r\n//         </p>\r\n//       </div>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Success Rate</h2>\r\n//         <p className=\"text-2xl\">\r\n//           {systemStats.successRate !== undefined \r\n//             ? `${systemStats.successRate.toFixed(2)}%` \r\n//             : \"N/A\"}\r\n//         </p>\r\n//       </div>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Accuracy</h2>\r\n//         <p className=\"text-2xl\">\r\n//           {systemStats.accuracy !== undefined \r\n//             ? `${systemStats.accuracy.toFixed(2)}%` \r\n//             : \"N/A\"}\r\n//         </p>\r\n//       </div>\r\n//     </>\r\n//   ) : (\r\n//     <p className=\"text-center text-gray-500\">Loading system statistics...</p>\r\n//   )}\r\n// </div>\r\n\r\n//       {/* Processing History Chart */}\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\r\n//         <h2 className=\"text-xl font-semibold mb-4\">Processing History (Last 7 Days)</h2>\r\n//         <Line data={historyChartData} />\r\n//       </div>\r\n\r\n//       {/* Performance Metrics */}\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\r\n//         <h2 className=\"text-xl font-semibold mb-4\">Performance Metrics</h2>\r\n//         <Bar data={psnrChartData} />\r\n//       </div>\r\n\r\n//       {/* Recent Activity */}\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold mb-4\">Recent Activity</h2>\r\n//         <ul>\r\n//           {recentActivity.map((activity, index) => (\r\n//             <li key={index} className=\"mb-2\">\r\n//               {activity.description} - <span className=\"text-gray-500\">{activity.timestamp}</span>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const [systemStats, setSystemStats] = useState(null);\r\n  const [processingHistory, setProcessingHistory] = useState([]);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState(null);\r\n  const [recentActivity, setRecentActivity] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const ws = new WebSocket(\"ws://localhost:5000\");\r\n\r\n    ws.onopen = () => console.log(\"WebSocket connected\");\r\n\r\n    ws.onmessage = (event) => {\r\n      const message = JSON.parse(event.data);\r\n      if (message.type === \"stats\") {\r\n        setSystemStats(message.data);\r\n      }\r\n    };\r\n\r\n    ws.onclose = () => console.log(\"WebSocket disconnected\");\r\n    ws.onerror = (error) => console.error(\"WebSocket error:\", error);\r\n\r\n    return () => ws.close();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const [statsRes, historyRes, metricsRes, activityRes] = await Promise.all([\r\n          axios.get('http://localhost:5000/api/system-stats'),\r\n          axios.get('http://localhost:5000/api/processing-history'),\r\n          axios.get('http://localhost:5000/api/performance-metrics'),\r\n          axios.get('http://localhost:5000/api/recent-activity'),\r\n        ]);\r\n\r\n        setSystemStats(statsRes.data);\r\n        setProcessingHistory(historyRes.data);\r\n        setPerformanceMetrics(metricsRes.data);\r\n        setRecentActivity(activityRes.data);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const historyChartData = {\r\n    labels: processingHistory.map((entry) => entry.date),\r\n    datasets: [{\r\n      label: 'Processed Images',\r\n      data: processingHistory.map((entry) => entry.count),\r\n      borderColor: 'rgba(75, 192, 192, 1)',\r\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n    }],\r\n  };\r\n\r\n  const psnrChartData = {\r\n    labels: ['PSNR'],\r\n    datasets: [{\r\n      label: 'PSNR',\r\n      data: [performanceMetrics?.psnr ?? 0],\r\n      backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n      borderColor: 'rgba(153, 102, 255, 1)',\r\n    }],\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n      {systemStats ? (\r\n        <>\r\n          {['processedImages', 'successfulImages'].map((key) => (\r\n            <div key={key} className=\"bg-white p-6 rounded-lg shadow-md\">\r\n              <h2 className=\"text-xl font-semibold\">{key.replace(/([A-Z])/g, ' $1')}</h2>\r\n              <p className=\"text-2xl\">{systemStats[key] ?? \"N/A\"}</p>\r\n            </div>\r\n          ))}\r\n          {[\"avgProcessingTime\", \"successRate\"].map((key) => (\r\n            <div key={key} className=\"bg-white p-6 rounded-lg shadow-md\">\r\n              <h2 className=\"text-xl font-semibold\">{key.replace(/([A-Z])/g, ' $1')}</h2>\r\n              <p className=\"text-2xl\">\r\n                {systemStats[key] !== undefined ? `${systemStats[key].toFixed(2)}${key.includes(\"Time\") ? \" ms\" : \"%\"}` : \"N/A\"}\r\n              </p>\r\n            </div>\r\n          ))}\r\n        </>\r\n      ) : (\r\n        <p className=\"text-center text-gray-500\">Loading system statistics...</p>\r\n      )}\r\n\r\n      <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Processing History (Last 7 Days)</h2>\r\n        <Line data={historyChartData} />\r\n      </div>\r\n\r\n      <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Performance Metrics</h2>\r\n        <Bar data={psnrChartData} />\r\n      </div>\r\n\r\n      <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n        <h2 className=\"text-xl font-semibold mb-4\">Recent Activity</h2>\r\n        <ul>\r\n          {recentActivity.map((activity, index) => (\r\n            <li key={index} className=\"mb-2\">\r\n              {activity.description} - <span className=\"text-gray-500\">{activity.timestamp}</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,GAAG,QAAQ,iBAAiB;AAC3C,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;;AAEjB;AAAA,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}