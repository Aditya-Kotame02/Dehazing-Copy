{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aditya Kotame\\\\Dehazing-Copy\\\\frontend\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Line, Bar } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from 'chart.js';\n\n// // Register Chart.js components\n// ChartJS.register(\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   BarElement,\n//   Title,\n//   Tooltip,\n//   Legend\n// );\n\n// const Dashboard = () => {\n//   const [systemStats, setSystemStats] = useState({\n//     processedImages: 0,\n//     successfulImages: 0,\n//     avgProcessingTime: 0,\n//     successRate: 0,\n//     psnr: 0,\n//   });\n//   const [processingHistory, setProcessingHistory] = useState([]);\n//   const [performanceMetrics, setPerformanceMetrics] = useState({\n//     psnr: 0,\n//   });\n//   const [recentActivity, setRecentActivity] = useState([]);\n\n//   // WebSocket connection\n//   useEffect(() => {\n//     const ws = new WebSocket(\"ws://localhost:5000\");\n\n//     ws.onopen = () => {\n//       console.log(\"WebSocket connected\");\n//     };\n\n//     ws.onmessage = (event) => {\n//       const message = JSON.parse(event.data);\n//       console.log(\"Received WebSocket message:\", message);\n\n//       if (message.type === \"stats\") {\n//         console.log(\"Updating system stats with:\", message.data);\n//         setSystemStats(message.data); // Update system stats in real-time\n//       }\n//     };\n\n//     ws.onclose = () => {\n//       console.log(\"WebSocket disconnected\");\n//     };\n\n//     ws.onerror = (error) => {\n//       console.error(\"WebSocket error:\", error);\n//     };\n\n//     // Cleanup WebSocket connection on component unmount\n//     return () => {\n//       ws.close();\n//     };\n//   }, []); // Empty dependency array ensures this runs only once\n\n//   // Log updated system stats\n//   useEffect(() => {\n//     console.log(\"Updated systemStats:\", systemStats);\n//   }, [systemStats]);\n\n//   // Fetch initial data from the backend\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         console.log(\"Fetching system stats...\");\n//         const statsResponse = await axios.get('http://localhost:5000/api/system-stats');\n//         console.log(\"System stats response:\", statsResponse.data);\n\n//         console.log(\"Fetching processing history...\");\n//         const historyResponse = await axios.get('http://localhost:5000/api/processing-history');\n//         console.log(\"Processing history response:\", historyResponse.data);\n\n//         console.log(\"Fetching performance metrics...\");\n//         const metricsResponse = await axios.get('http://localhost:5000/api/performance-metrics');\n//         console.log(\"Performance metrics response:\", metricsResponse.data);\n\n//         console.log(\"Fetching recent activity...\");\n//         const activityResponse = await axios.get('http://localhost:5000/api/recent-activity');\n//         console.log(\"Recent activity response:\", activityResponse.data);\n\n//         // Update state with fetched data\n//         setSystemStats(statsResponse.data);\n//         setProcessingHistory(historyResponse.data);\n//         setPerformanceMetrics(metricsResponse.data);\n//         setRecentActivity(activityResponse.data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Chart data for processing history\n//   const historyChartData = {\n//     labels: processingHistory.map((entry) => entry.date),\n//     datasets: [\n//       {\n//         label: 'Processed Images',\n//         data: processingHistory.map((entry) => entry.count),\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         backgroundColor: 'rgba(75, 192, 192, 0.2)',\n//       },\n//     ],\n//   };\n\n//   // Chart data for PSNR\n//   const psnrChartData = {\n//     labels: ['PSNR'],\n//     datasets: [\n//       {\n//         label: 'PSNR',\n//         data: [systemStats.psnr],\n//         backgroundColor: 'rgba(153, 102, 255, 0.2)',\n//         borderColor: 'rgba(153, 102, 255, 1)',\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n//   {systemStats ? (\n//     <>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Processed Images</h2>\n//         <p className=\"text-2xl\">{systemStats.processedImages ?? \"N/A\"}</p>\n//       </div>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Successful Images</h2>\n//         <p className=\"text-2xl\">{systemStats.successfulImages ?? \"N/A\"}</p>\n//       </div>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Avg. Processing Time</h2>\n//         <p className=\"text-2xl\">\n//           {systemStats.avgProcessingTime !== undefined \n//             ? `${systemStats.avgProcessingTime.toFixed(2)} ms` \n//             : \"N/A\"}\n//         </p>\n//       </div>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Success Rate</h2>\n//         <p className=\"text-2xl\">\n//           {systemStats.successRate !== undefined \n//             ? `${systemStats.successRate.toFixed(2)}%` \n//             : \"N/A\"}\n//         </p>\n//       </div>\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold\">Accuracy</h2>\n//         <p className=\"text-2xl\">\n//           {systemStats.accuracy !== undefined \n//             ? `${systemStats.accuracy.toFixed(2)}%` \n//             : \"N/A\"}\n//         </p>\n//       </div>\n//     </>\n//   ) : (\n//     <p className=\"text-center text-gray-500\">Loading system statistics...</p>\n//   )}\n// </div>\n\n//       {/* Processing History Chart */}\n//       <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n//         <h2 className=\"text-xl font-semibold mb-4\">Processing History (Last 7 Days)</h2>\n//         <Line data={historyChartData} />\n//       </div>\n\n//       {/* Performance Metrics */}\n//       <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\n//         <h2 className=\"text-xl font-semibold mb-4\">Performance Metrics</h2>\n//         <Bar data={psnrChartData} />\n//       </div>\n\n//       {/* Recent Activity */}\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\n//         <h2 className=\"text-xl font-semibold mb-4\">Recent Activity</h2>\n//         <ul>\n//           {recentActivity.map((activity, index) => (\n//             <li key={index} className=\"mb-2\">\n//               {activity.description} - <span className=\"text-gray-500\">{activity.timestamp}</span>\n//             </li>\n//           ))}\n//         </ul>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from \"chart.js\";\n\n// Register Chart.js components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend);\nconst Dashboard = () => {\n  _s();\n  var _systemStats$psnr;\n  const [systemStats, setSystemStats] = useState({\n    processedImages: 0,\n    successfulImages: 0,\n    avgProcessingTime: 0,\n    successRate: 0,\n    psnr: 0,\n    accuracy: 0\n  });\n  const [processingHistory, setProcessingHistory] = useState([]);\n  const [recentActivity, setRecentActivity] = useState([]);\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    const ws = new WebSocket(\"ws://localhost:5000\");\n    ws.onopen = () => console.log(\"WebSocket connected\");\n    ws.onmessage = event => {\n      const message = JSON.parse(event.data);\n      console.log(\"Received WebSocket message:\", message);\n      if (message.type === \"stats\") {\n        console.log(\"Updating system stats:\", message.data);\n        setSystemStats(message.data);\n      }\n    };\n    ws.onclose = () => console.log(\"WebSocket disconnected\");\n    ws.onerror = error => console.error(\"WebSocket error:\", error);\n    return () => ws.close();\n  }, []);\n\n  // Log updated system stats\n  useEffect(() => {\n    console.log(\"Updated systemStats:\", systemStats);\n  }, [systemStats]);\n\n  // Fetch initial data from the backend\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const [statsRes, historyRes, activityRes] = await Promise.all([axios.get(\"http://localhost:5000/api/system-stats\"), axios.get(\"http://localhost:5000/api/processing-history\"), axios.get(\"http://localhost:5000/api/recent-activity\")]);\n        setSystemStats(statsRes.data);\n        setProcessingHistory(historyRes.data);\n        setRecentActivity(activityRes.data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Chart data for processing history\n  const historyChartData = {\n    labels: processingHistory.map(entry => entry.date),\n    datasets: [{\n      label: \"Processed Images\",\n      data: processingHistory.map(entry => entry.count),\n      borderColor: \"rgba(79, 70, 229, 1)\",\n      backgroundColor: \"rgba(79, 70, 229, 0.1)\",\n      borderWidth: 2,\n      tension: 0.1,\n      fill: true\n    }]\n  };\n\n  // Chart data for PSNR\n  const psnrChartData = {\n    labels: [\"PSNR\"],\n    datasets: [{\n      label: \"PSNR\",\n      data: [(_systemStats$psnr = systemStats.psnr) !== null && _systemStats$psnr !== void 0 ? _systemStats$psnr : 0],\n      backgroundColor: \"rgba(99, 102, 241, 0.8)\",\n      borderColor: \"rgba(79, 70, 229, 1)\",\n      borderWidth: 1\n    }]\n  };\n\n  // UI Cards\n  const statsCards = [{\n    title: \"Processed Images\",\n    value: systemStats.processedImages,\n    color: \"bg-indigo-100 text-indigo-800\"\n  }, {\n    title: \"Successful Images\",\n    value: systemStats.successfulImages,\n    color: \"bg-green-100 text-green-800\"\n  }, {\n    title: \"Avg. Processing Time\",\n    value: systemStats.avgProcessingTime !== undefined ? `${systemStats.avgProcessingTime.toFixed(2)} ms` : \"N/A\",\n    color: \"bg-blue-100 text-blue-800\"\n  }, {\n    title: \"Success Rate\",\n    value: systemStats.successRate !== undefined ? `${systemStats.successRate.toFixed(2)}%` : \"N/A\",\n    color: \"bg-purple-100 text-purple-800\"\n  }, {\n    title: \"Accuracy\",\n    value: systemStats.accuracy !== undefined ? `${systemStats.accuracy.toFixed(2)}%` : \"N/A\",\n    color: \"bg-pink-100 text-pink-800\"\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-50 p-4 md:p-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl md:text-3xl font-bold text-gray-800 mb-6\",\n      children: \"System Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 mb-8\",\n      children: statsCards.map((stat, index) => {\n        var _stat$value;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `p-6 rounded-lg shadow-sm border ${stat.color} transition-all hover:shadow-md`,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-sm font-medium uppercase tracking-wider\",\n            children: stat.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-2xl font-bold mt-2\",\n            children: (_stat$value = stat.value) !== null && _stat$value !== void 0 ? _stat$value : \"N/A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-3 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lg:col-span-2 bg-white p-6 rounded-lg shadow-sm border border-gray-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-800 mb-4\",\n          children: \"Processing History (Last 7 Days)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: historyChartData,\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  position: 'top'\n                }\n              },\n              scales: {\n                y: {\n                  beginAtZero: true\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-sm border border-gray-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-800 mb-4\",\n          children: \"Recent Activity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"space-y-3\",\n          children: recentActivity.map((activity, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"p-3 bg-gray-50 rounded-md hover:bg-gray-100 transition-colors\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm text-gray-700\",\n              children: activity.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-xs text-gray-500\",\n              children: activity.timestamp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg shadow-sm border border-gray-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-semibold text-gray-800 mb-4\",\n          children: \"Performance Metrics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-64\",\n          children: /*#__PURE__*/_jsxDEV(Bar, {\n            data: psnrChartData,\n            options: {\n              responsive: true,\n              maintainAspectRatio: false,\n              plugins: {\n                legend: {\n                  display: false\n                }\n              },\n              scales: {\n                y: {\n                  beginAtZero: true\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 363,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"7Y2Gqa90X2s6m8V9BvnP3fdATgo=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","Line","Bar","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Dashboard","_s","_systemStats$psnr","systemStats","setSystemStats","processedImages","successfulImages","avgProcessingTime","successRate","psnr","accuracy","processingHistory","setProcessingHistory","recentActivity","setRecentActivity","ws","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","type","onclose","onerror","error","close","fetchData","statsRes","historyRes","activityRes","Promise","all","get","historyChartData","labels","map","entry","date","datasets","label","count","borderColor","backgroundColor","borderWidth","tension","fill","psnrChartData","statsCards","title","value","color","undefined","toFixed","className","children","fileName","_jsxFileName","lineNumber","columnNumber","stat","index","_stat$value","options","responsive","maintainAspectRatio","plugins","legend","position","scales","y","beginAtZero","activity","description","timestamp","display","_c","$RefreshReg$"],"sources":["C:/Users/Aditya Kotame/Dehazing-Copy/frontend/src/pages/Dashboard.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import axios from 'axios';\r\n// import { Line, Bar } from 'react-chartjs-2';\r\n// import {\r\n//   Chart as ChartJS,\r\n//   CategoryScale,\r\n//   LinearScale,\r\n//   PointElement,\r\n//   LineElement,\r\n//   BarElement,\r\n//   Title,\r\n//   Tooltip,\r\n//   Legend,\r\n// } from 'chart.js';\r\n\r\n// // Register Chart.js components\r\n// ChartJS.register(\r\n//   CategoryScale,\r\n//   LinearScale,\r\n//   PointElement,\r\n//   LineElement,\r\n//   BarElement,\r\n//   Title,\r\n//   Tooltip,\r\n//   Legend\r\n// );\r\n\r\n// const Dashboard = () => {\r\n//   const [systemStats, setSystemStats] = useState({\r\n//     processedImages: 0,\r\n//     successfulImages: 0,\r\n//     avgProcessingTime: 0,\r\n//     successRate: 0,\r\n//     psnr: 0,\r\n//   });\r\n//   const [processingHistory, setProcessingHistory] = useState([]);\r\n//   const [performanceMetrics, setPerformanceMetrics] = useState({\r\n//     psnr: 0,\r\n//   });\r\n//   const [recentActivity, setRecentActivity] = useState([]);\r\n\r\n//   // WebSocket connection\r\n//   useEffect(() => {\r\n//     const ws = new WebSocket(\"ws://localhost:5000\");\r\n\r\n//     ws.onopen = () => {\r\n//       console.log(\"WebSocket connected\");\r\n//     };\r\n\r\n//     ws.onmessage = (event) => {\r\n//       const message = JSON.parse(event.data);\r\n//       console.log(\"Received WebSocket message:\", message);\r\n\r\n//       if (message.type === \"stats\") {\r\n//         console.log(\"Updating system stats with:\", message.data);\r\n//         setSystemStats(message.data); // Update system stats in real-time\r\n//       }\r\n//     };\r\n\r\n//     ws.onclose = () => {\r\n//       console.log(\"WebSocket disconnected\");\r\n//     };\r\n\r\n//     ws.onerror = (error) => {\r\n//       console.error(\"WebSocket error:\", error);\r\n//     };\r\n\r\n//     // Cleanup WebSocket connection on component unmount\r\n//     return () => {\r\n//       ws.close();\r\n//     };\r\n//   }, []); // Empty dependency array ensures this runs only once\r\n\r\n//   // Log updated system stats\r\n//   useEffect(() => {\r\n//     console.log(\"Updated systemStats:\", systemStats);\r\n//   }, [systemStats]);\r\n\r\n//   // Fetch initial data from the backend\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         console.log(\"Fetching system stats...\");\r\n//         const statsResponse = await axios.get('http://localhost:5000/api/system-stats');\r\n//         console.log(\"System stats response:\", statsResponse.data);\r\n\r\n//         console.log(\"Fetching processing history...\");\r\n//         const historyResponse = await axios.get('http://localhost:5000/api/processing-history');\r\n//         console.log(\"Processing history response:\", historyResponse.data);\r\n\r\n//         console.log(\"Fetching performance metrics...\");\r\n//         const metricsResponse = await axios.get('http://localhost:5000/api/performance-metrics');\r\n//         console.log(\"Performance metrics response:\", metricsResponse.data);\r\n\r\n//         console.log(\"Fetching recent activity...\");\r\n//         const activityResponse = await axios.get('http://localhost:5000/api/recent-activity');\r\n//         console.log(\"Recent activity response:\", activityResponse.data);\r\n\r\n//         // Update state with fetched data\r\n//         setSystemStats(statsResponse.data);\r\n//         setProcessingHistory(historyResponse.data);\r\n//         setPerformanceMetrics(metricsResponse.data);\r\n//         setRecentActivity(activityResponse.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   // Chart data for processing history\r\n//   const historyChartData = {\r\n//     labels: processingHistory.map((entry) => entry.date),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Processed Images',\r\n//         data: processingHistory.map((entry) => entry.count),\r\n//         borderColor: 'rgba(75, 192, 192, 1)',\r\n//         backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Chart data for PSNR\r\n//   const psnrChartData = {\r\n//     labels: ['PSNR'],\r\n//     datasets: [\r\n//       {\r\n//         label: 'PSNR',\r\n//         data: [systemStats.psnr],\r\n//         backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n//         borderColor: 'rgba(153, 102, 255, 1)',\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n//   {systemStats ? (\r\n//     <>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Processed Images</h2>\r\n//         <p className=\"text-2xl\">{systemStats.processedImages ?? \"N/A\"}</p>\r\n//       </div>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Successful Images</h2>\r\n//         <p className=\"text-2xl\">{systemStats.successfulImages ?? \"N/A\"}</p>\r\n//       </div>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Avg. Processing Time</h2>\r\n//         <p className=\"text-2xl\">\r\n//           {systemStats.avgProcessingTime !== undefined \r\n//             ? `${systemStats.avgProcessingTime.toFixed(2)} ms` \r\n//             : \"N/A\"}\r\n//         </p>\r\n//       </div>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Success Rate</h2>\r\n//         <p className=\"text-2xl\">\r\n//           {systemStats.successRate !== undefined \r\n//             ? `${systemStats.successRate.toFixed(2)}%` \r\n//             : \"N/A\"}\r\n//         </p>\r\n//       </div>\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold\">Accuracy</h2>\r\n//         <p className=\"text-2xl\">\r\n//           {systemStats.accuracy !== undefined \r\n//             ? `${systemStats.accuracy.toFixed(2)}%` \r\n//             : \"N/A\"}\r\n//         </p>\r\n//       </div>\r\n//     </>\r\n//   ) : (\r\n//     <p className=\"text-center text-gray-500\">Loading system statistics...</p>\r\n//   )}\r\n// </div>\r\n\r\n//       {/* Processing History Chart */}\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\r\n//         <h2 className=\"text-xl font-semibold mb-4\">Processing History (Last 7 Days)</h2>\r\n//         <Line data={historyChartData} />\r\n//       </div>\r\n\r\n//       {/* Performance Metrics */}\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md mb-8\">\r\n//         <h2 className=\"text-xl font-semibold mb-4\">Performance Metrics</h2>\r\n//         <Bar data={psnrChartData} />\r\n//       </div>\r\n\r\n//       {/* Recent Activity */}\r\n//       <div className=\"bg-white p-6 rounded-lg shadow-md\">\r\n//         <h2 className=\"text-xl font-semibold mb-4\">Recent Activity</h2>\r\n//         <ul>\r\n//           {recentActivity.map((activity, index) => (\r\n//             <li key={index} className=\"mb-2\">\r\n//               {activity.description} - <span className=\"text-gray-500\">{activity.timestamp}</span>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst Dashboard = () => {\r\n  const [systemStats, setSystemStats] = useState({\r\n    processedImages: 0,\r\n    successfulImages: 0,\r\n    avgProcessingTime: 0,\r\n    successRate: 0,\r\n    psnr: 0,\r\n    accuracy: 0,\r\n  });\r\n  const [processingHistory, setProcessingHistory] = useState([]);\r\n  const [recentActivity, setRecentActivity] = useState([]);\r\n\r\n  // WebSocket connection for real-time updates\r\n  useEffect(() => {\r\n    const ws = new WebSocket(\"ws://localhost:5000\");\r\n\r\n    ws.onopen = () => console.log(\"WebSocket connected\");\r\n    ws.onmessage = (event) => {\r\n      const message = JSON.parse(event.data);\r\n      console.log(\"Received WebSocket message:\", message);\r\n\r\n      if (message.type === \"stats\") {\r\n        console.log(\"Updating system stats:\", message.data);\r\n        setSystemStats(message.data);\r\n      }\r\n    };\r\n    ws.onclose = () => console.log(\"WebSocket disconnected\");\r\n    ws.onerror = (error) => console.error(\"WebSocket error:\", error);\r\n\r\n    return () => ws.close();\r\n  }, []);\r\n\r\n  // Log updated system stats\r\n  useEffect(() => {\r\n    console.log(\"Updated systemStats:\", systemStats);\r\n  }, [systemStats]);\r\n\r\n  // Fetch initial data from the backend\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const [statsRes, historyRes, activityRes] = await Promise.all([\r\n          axios.get(\"http://localhost:5000/api/system-stats\"),\r\n          axios.get(\"http://localhost:5000/api/processing-history\"),\r\n          axios.get(\"http://localhost:5000/api/recent-activity\"),\r\n        ]);\r\n\r\n        setSystemStats(statsRes.data);\r\n        setProcessingHistory(historyRes.data);\r\n        setRecentActivity(activityRes.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Chart data for processing history\r\n  const historyChartData = {\r\n    labels: processingHistory.map((entry) => entry.date),\r\n    datasets: [\r\n      {\r\n        label: \"Processed Images\",\r\n        data: processingHistory.map((entry) => entry.count),\r\n        borderColor: \"rgba(79, 70, 229, 1)\",\r\n        backgroundColor: \"rgba(79, 70, 229, 0.1)\",\r\n        borderWidth: 2,\r\n        tension: 0.1,\r\n        fill: true,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart data for PSNR\r\n  const psnrChartData = {\r\n    labels: [\"PSNR\"],\r\n    datasets: [\r\n      {\r\n        label: \"PSNR\",\r\n        data: [systemStats.psnr ?? 0],\r\n        backgroundColor: \"rgba(99, 102, 241, 0.8)\",\r\n        borderColor: \"rgba(79, 70, 229, 1)\",\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  // UI Cards\r\n  const statsCards = [\r\n    { \r\n      title: \"Processed Images\", \r\n      value: systemStats.processedImages,\r\n      color: \"bg-indigo-100 text-indigo-800\"\r\n    },\r\n    { \r\n      title: \"Successful Images\", \r\n      value: systemStats.successfulImages,\r\n      color: \"bg-green-100 text-green-800\"\r\n    },\r\n    {\r\n      title: \"Avg. Processing Time\",\r\n      value:\r\n        systemStats.avgProcessingTime !== undefined\r\n          ? `${systemStats.avgProcessingTime.toFixed(2)} ms`\r\n          : \"N/A\",\r\n      color: \"bg-blue-100 text-blue-800\"\r\n    },\r\n    {\r\n      title: \"Success Rate\",\r\n      value:\r\n        systemStats.successRate !== undefined\r\n          ? `${systemStats.successRate.toFixed(2)}%`\r\n          : \"N/A\",\r\n      color: \"bg-purple-100 text-purple-800\"\r\n    },\r\n    {\r\n      title: \"Accuracy\",\r\n      value:\r\n        systemStats.accuracy !== undefined\r\n          ? `${systemStats.accuracy.toFixed(2)}%`\r\n          : \"N/A\",\r\n      color: \"bg-pink-100 text-pink-800\"\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 p-4 md:p-8\">\r\n      <h1 className=\"text-2xl md:text-3xl font-bold text-gray-800 mb-6\">System Dashboard</h1>\r\n      \r\n      {/* Stats Cards */}\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 mb-8\">\r\n        {statsCards.map((stat, index) => (\r\n          <div \r\n            key={index} \r\n            className={`p-6 rounded-lg shadow-sm border ${stat.color} transition-all hover:shadow-md`}\r\n          >\r\n            <h2 className=\"text-sm font-medium uppercase tracking-wider\">{stat.title}</h2>\r\n            <p className=\"text-2xl font-bold mt-2\">{stat.value ?? \"N/A\"}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Processing History Chart */}\r\n        <div className=\"lg:col-span-2 bg-white p-6 rounded-lg shadow-sm border border-gray-100\">\r\n          <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">\r\n            Processing History (Last 7 Days)\r\n          </h2>\r\n          <div className=\"h-64\">\r\n            <Line \r\n              data={historyChartData} \r\n              options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                  legend: {\r\n                    position: 'top',\r\n                  },\r\n                },\r\n                scales: {\r\n                  y: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Recent Activity */}\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-100\">\r\n          <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Recent Activity</h2>\r\n          <ul className=\"space-y-3\">\r\n            {recentActivity.map((activity, index) => (\r\n              <li \r\n                key={index} \r\n                className=\"p-3 bg-gray-50 rounded-md hover:bg-gray-100 transition-colors\"\r\n              >\r\n                <p className=\"text-sm text-gray-700\">{activity.description}</p>\r\n                <span className=\"text-xs text-gray-500\">{activity.timestamp}</span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n\r\n        {/* Performance Metrics */}\r\n        <div className=\"bg-white p-6 rounded-lg shadow-sm border border-gray-100\">\r\n          <h2 className=\"text-lg font-semibold text-gray-800 mb-4\">Performance Metrics</h2>\r\n          <div className=\"h-64\">\r\n            <Bar \r\n              data={psnrChartData} \r\n              options={{\r\n                responsive: true,\r\n                maintainAspectRatio: false,\r\n                plugins: {\r\n                  legend: {\r\n                    display: false\r\n                  },\r\n                },\r\n                scales: {\r\n                  y: {\r\n                    beginAtZero: true\r\n                  }\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,GAAG,QAAQ,iBAAiB;AAC3C,SACEC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,MAAM,QACD,UAAU;;AAEjB;AAAA,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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}